
# vi:nu:et:sts=4 ts=4 sw=4

# Generate a minimal Docker container with app01ma installed

# This is a two step process. The first step is to generate the go
# binary program which will be passed to the second step. You have
# to keep a few things in mind when doing this. First, there are
# problems cross compiling go if cgo is needed and it is needed
# for some of the sql servers.  Second, you have to keep the glibc
# or its substitute at the same version level between the steps.
# Since Debian Linux and Ubuntu Linux are compatible, you just
# need to find the releases of each that have the same version
# of glibc. The Debian container is much larger than the Ubuntu
# one. So, Ubuntu was used.

# Alpine Linux was initially used for both steps. However, it is
# such a reduced Linux that there were problems compiling and
# running the code. When more time is available, this might be
# investigated further, because it is definitely much smaller
# than Ubuntu. But, it uses a glibc substitute.


# WARNING: This file must be located in the main directory
#           because of docker limitations.


# Build the application program using Debian-Golang container.
FROM golang:1.12-stretch AS golang
LABEL maintainer="bob@2kranki.us"
ENV GOLANG_DOCKER_CONTAINER=1

ENV CGO_ENABLED=0
ENV GOOS=linux
RUN go get github.com/2kranki/jsonpreprocess \
    && go get github.com/2kranki/go_util \
    && go get github.com/shopspring/decimal \
    && go get "github.com/go-sql-driver/mysql"
WORKDIR /go/src/app01ma/cmd
COPY ./cmd      ./
WORKDIR /go/src/app01ma/pkg
COPY ./pkg      ./
WORKDIR /go/src/app01ma/vendor
COPY ./vendor   ./
WORKDIR /go/src/app01ma
COPY go.mod     ./
COPY go.sum     ./
WORKDIR /go/bin
COPY ./scripts/t.sh ./
RUN /go/bin/t.sh
COPY --from=golang /go/bin/rc.tmp . 


